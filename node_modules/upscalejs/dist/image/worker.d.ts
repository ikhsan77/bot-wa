import type { ImageSource } from "./canvas";
import type { Model, Options } from "./options";
interface Terminator {
    terminate(): void;
}
declare abstract class WorkerPool<worker extends Terminator> {
    protected options: {
        maxWorkers: number;
        maxInternalWorkers: number;
        denoiseModel: string;
        base: string;
    } & Options;
    protected created_workers: number;
    protected workers: worker[];
    private waitingForWorker;
    abstract upscale(image: ImageSource): Promise<ImageData>;
    constructor(options?: Options);
    protected getWorker(): Promise<worker>;
    protected putWorker(worker: worker): void;
    terminate(): void;
}
export declare class Upscaler extends WorkerPool<upscaleWorker> {
    constructor(options?: Options);
    upscale(image: ImageSource): Promise<ImageData>;
}
declare class upscaleWorker extends WorkerPool<Worker> {
    private id;
    private canvas;
    private pending;
    private resolve?;
    constructor(options?: Options);
    private onmessage;
    upscale(image: ImageSource): Promise<ImageData>;
}
export type { Model };
declare const _default: {
    Upscaler: typeof Upscaler;
};
export default _default;
