"use strict";var j=Object.defineProperty;var D=(e,t,a)=>t in e?j(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a;var o=(e,t,a)=>(D(e,typeof t!="symbol"?t+"":t,a),a);Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});var g=require("./assets/options.898fab3c.js"),p=require("canvas"),O=require("onnxruntime-node");function x(e){return e&&typeof e=="object"&&"default"in e?e:{default:e}}function A(e){if(e&&e.__esModule)return e;var t=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});return e&&Object.keys(e).forEach(function(a){if(a!=="default"){var r=Object.getOwnPropertyDescriptor(e,a);Object.defineProperty(t,a,r.get?r:{enumerable:!0,get:function(){return e[a]}})}}),t.default=e,Object.freeze(t)}var U=x(p),I=A(O);class L{constructor(t,a){o(this,"ort");o(this,"baseURL");o(this,"models",new Map);this.ort=t,this.baseURL=a}async loadModel(t){const a=this.models.get(t);if(a)return a;this.ort.env.wasm.wasmPaths=`${this.baseURL}js/`;const r=`${this.baseURL}models/up2x-latest-${t}.onnx`,n=this.ort.InferenceSession.create(r);return this.models.set(t,n),n}async predict(t,a){var f;const r=new Array,n=new Array,c=new Array;for(let s=0;s<t.data.length;s+=4)r.push(t.data[s]),n.push(t.data[s+1]),c.push(t.data[s+2]);const i=r.concat(n).concat(c),l=new Float32Array(3*200*200);for(let s=0;s<l.length;s++)l[s]=i[s]/255;const v=new this.ort.Tensor("float32",l,[1,3,200,200]),y=await this.loadModel(a),m={input_1:v},w=await y.run(m),u=new Uint8ClampedArray(4*400*400),_=w.output_1.data;for(const s of Array(4).keys())for(let h=16e4*s,d=s;d<u.length;h++,d+=4)u[d]=(f=_[h])!=null?f:255;return p.createImageData(u,400,400)}}class b{constructor(t){o(this,"options");o(this,"predictor");this.options=Object.assign(g.defaultOptions,t),this.predictor=new L(I,this.options.base)}async upscale(t){const a=p.createCanvas(t.width*2,t.height*2),r=g.canvasListFromImageData(t);for(let n=0;n<r.length;n++){const c=r[n].element.getContext("2d").getImageData(0,0,200,200),i=await this.predictor.predict(c,this.options.denoiseModel);a.getContext("2d").putImageData(i,r[n].x,r[n].y)}return a.getContext("2d").getImageData(0,0,a.width,a.height)}}module.exports={Upscaler:b,canvas:U.default};exports.Upscaler=b;
